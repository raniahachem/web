package autoxpress.GUI;import autoxpress.entities.Client;import autoxpress.entities.Conducteur;import java.io.IOException;import java.net.URL;import java.security.NoSuchAlgorithmException;import java.time.Duration;import java.util.List;import java.util.Optional;import java.util.ResourceBundle;import javafx.animation.TranslateTransition;import javafx.event.ActionEvent;import javafx.event.EventHandler;import javafx.fxml.FXML;import javafx.fxml.FXMLLoader;import javafx.fxml.Initializable;import javafx.scene.Node;import javafx.scene.Parent;import javafx.scene.Scene;import javafx.scene.control.Alert;import javafx.scene.control.Button;import javafx.scene.control.ButtonType;import javafx.scene.control.TabPane;import javafx.scene.control.TableColumn;import javafx.scene.control.TableView;import javafx.scene.control.TextField;import javafx.scene.input.MouseEvent;import javafx.scene.layout.Pane;import javafx.stage.Stage;import autoxpress.services.ClientCRUD;import autoxpress.services.ConducteurCRUD;import autoxpress.services.ConducteurPdfGenerator;import static com.itextpdf.text.pdf.PdfFileSpecification.url;import java.io.File;import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.util.ArrayList;import javafx.collections.FXCollections;import javafx.collections.ObservableList;import javafx.scene.control.cell.PropertyValueFactory;import javafx.scene.image.Image;import javafx.scene.image.ImageView;/** * FXML Controller class * * @author 21622 */public class MenuadminController implements Initializable {private final String url = "jdbc:mysql://localhost:3306/autoxpress";    private final String user = "root";    private final String password = "";    @FXML    private Button btnuti;    @FXML    private Button btnres;    @FXML    private Button btnrec;    @FXML    private Button btncontrat;    @FXML    private Button btnveh;    private TextField tftid_client;    @FXML    private Button btnuti2;    @FXML    private Button btnlivr;    @FXML    private Button btnpdf;    @FXML    private TableView<Conducteur> tabconducteur;    @FXML    private TableColumn<Conducteur, ?> tabid_conducteur;    @FXML    private TableColumn<Conducteur, ?> tabcin_conducteur;    @FXML    private TableColumn<Conducteur, ?> tabnom_conducteur;    @FXML    private TableColumn<Conducteur, ?> tabprenom_conducteur;    @FXML    private TableColumn<Conducteur, ?> tabtelephone_conducteur;    @FXML    private TableColumn<Conducteur, ?> tabemeil_conducteur;    @FXML    private TableColumn<Conducteur, ?> tabville_conducteur;    @FXML    private TableColumn<Conducteur, ?> tabmdp_conducteur;    @FXML    private TableColumn<Conducteur, ?> tabtype_de_permis;    @FXML    private TableColumn<Conducteur, ?> tabimage_conducteur;    @FXML    private Button btndelete_conducteur;    @FXML    private Button affcond;    @FXML    private TextField tftid;    @FXML    private Button btnoffre;    @FXML    private ImageView imageView;    /**     * Initializes the controller class.     */    @Override    public void initialize(URL url, ResourceBundle rb) {        //pageuser.setTranslateX(-1556);        //btnuti.setVisible(true);        //btnuti2.setVisible(false);        // TODO        tabconducteur.setOnMouseClicked(event -> {        if (event.getClickCount() == 1) {            Conducteur conducteurSelectionne = tabconducteur.getSelectionModel().getSelectedItem();            if (conducteurSelectionne != null) {                String imagePath = conducteurSelectionne.getImage_conducteur();                afficherImageConducteur(imagePath, imageView);            }        }    });    }    @FXML    private void click(MouseEvent event) {        Button button = (Button) event.getSource(); // Get the button that was clicked        button.setStyle("-fx-background-color: red;"); // Set the background color of the button to red    }    private void delete_client(ActionEvent event) {        ClientCRUD pcd = new ClientCRUD();        if (tftid_client.getText().isEmpty()) {            Alert alert = new Alert(Alert.AlertType.ERROR);            alert.setTitle("Erreur");            alert.setContentText("Aucun client supprimée !");            alert.showAndWait();            return;        }        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);        alert.setTitle("Confirmation");        alert.setHeaderText("Confirmation de suppression");        alert.setContentText("Voulez-vous vraiment supprimer le client ?");        Optional<ButtonType> result = alert.showAndWait();        if (result.isPresent() && result.get() == ButtonType.OK) {            pcd.DeleteClient(Integer.parseInt(tftid_client.getText()));            System.out.println("Client supprimé !");            //  updatetabclient();        }        //clean(event);    }      public void switchForm(ActionEvent event) {        try {            Parent avisParent = FXMLLoader.load(getClass().getResource("VehiculeAdmin.fxml"));            Scene avisScene = new Scene(avisParent);            Stage window = (Stage) (((Button) event.getSource()).getScene().getWindow());            window.setScene(avisScene);            window.show();        } catch (IOException e) {        }         }    @FXML    private void runa(MouseEvent event) throws IOException {        // Load the FXML file for the second scene            FXMLLoader loader = new FXMLLoader(getClass().getResource("utilisateurs.fxml"));            Parent root = loader.load();// Create a new scene with the new root node            Scene secondScene = new Scene(root);// Get the stage from the current scene            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();// Set the new scene as the current scene            stage.setScene(secondScene);            stage.show();    }    @FXML    private void movetohome(ActionEvent event) {        try {            Parent avisParent = FXMLLoader.load(getClass().getResource("homepage.fxml"));            Scene avisScene = new Scene(avisParent);            Stage window = (Stage) (((Button) event.getSource()).getScene().getWindow());            window.setScene(avisScene);            window.show();        } catch (IOException e) {        }    }    private void movetomenu(ActionEvent event) {        try {            Parent avisParent = FXMLLoader.load(getClass().getResource("loginadmin.fxml"));            Scene avisScene = new Scene(avisParent);            Stage window = (Stage) (((Button) event.getSource()).getScene().getWindow());            window.setScene(avisScene);            window.show();        } catch (IOException e) {        }                    }    @FXML    private void reclamation(ActionEvent event) {            try {            Parent avisParent = FXMLLoader.load(getClass().getResource("Recback.fxml"));            Scene avisScene = new Scene(avisParent);            Stage window = (Stage) (((Button) event.getSource()).getScene().getWindow());            window.setScene(avisScene);            window.show();        } catch (IOException e) {        }            }    @FXML    private void reservation(ActionEvent event) {             try {            Parent avisParent = FXMLLoader.load(getClass().getResource("reservation.fxml"));            Scene avisScene = new Scene(avisParent);            Stage window = (Stage) (((Button) event.getSource()).getScene().getWindow());            window.setScene(avisScene);            window.show();        } catch (IOException e) {        }    }    @FXML    private void menucontrat(ActionEvent event) {          try {            Parent avisParent = FXMLLoader.load(getClass().getResource("listeContrat.fxml"));            Scene avisScene = new Scene(avisParent);            Stage window = (Stage) (((Button) event.getSource()).getScene().getWindow());            window.setScene(avisScene);            window.show();        } catch (IOException e) {        }    }    @FXML    private void livAdmin(ActionEvent event) {         try {            Parent avisParent = FXMLLoader.load(getClass().getResource("livraisonConducteur.fxml"));            Scene avisScene = new Scene(avisParent);            Stage window = (Stage) (((Button) event.getSource()).getScene().getWindow());            window.setScene(avisScene);            window.show();        } catch (IOException e) {        }    }    @FXML    private void clients(ActionEvent event) {        try {            Parent avisParent = FXMLLoader.load(getClass().getResource("client.fxml"));            Scene avisScene = new Scene(avisParent);            Stage window = (Stage) (((Button) event.getSource()).getScene().getWindow());            window.setScene(avisScene);            window.show();        } catch (IOException e) {        }    }    @FXML    private void vehicule(ActionEvent event) {        try {            Parent avisParent = FXMLLoader.load(getClass().getResource("VehiculeAdmin.fxml"));            Scene avisScene = new Scene(avisParent);            Stage window = (Stage) (((Button) event.getSource()).getScene().getWindow());            window.setScene(avisScene);            window.show();        } catch (IOException e) {        }    }    @FXML    private void conducteur(ActionEvent event) {        try {            Parent avisParent = FXMLLoader.load(getClass().getResource("menuadmin.fxml"));            Scene avisScene = new Scene(avisParent);            Stage window = (Stage) (((Button) event.getSource()).getScene().getWindow());            window.setScene(avisScene);            window.show();        } catch (IOException e) {        }    }    @FXML    private void generatePdf(ActionEvent event) {        ConducteurPdfGenerator pdfGenerator = new ConducteurPdfGenerator();List<Conducteur> conducteurList = ConducteurList();        pdfGenerator.generatePdf(conducteurList);    }    @FXML    private void delete_conducteur(ActionEvent event) {        ConducteurCRUD ccrud = new ConducteurCRUD();        if (tftid.getText().isEmpty()) {            Alert alert = new Alert(Alert.AlertType.ERROR);            alert.setTitle("Erreur");            alert.setContentText("Aucun conducteur supprimée !");            alert.showAndWait();            return;        }        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);        alert.setTitle("Confirmation");        alert.setHeaderText("Confirmation de suppression");        alert.setContentText("Voulez-vous vraiment supprimer ce conducteur?");        Optional<ButtonType> result = alert.showAndWait();        if (result.isPresent() && result.get() == ButtonType.OK) {            ccrud.DeleteConducteur(Integer.parseInt(tftid.getText()));            System.out.println("Conducteur supprimé !");            //  updatetabclient();        }        //clean(event);    }    @FXML    private void afficherconducteur(ActionEvent event) {        List<Conducteur> conducteurs = ConducteurList();    ObservableList<Conducteur> observableList = FXCollections.observableArrayList(conducteurs);    tabid_conducteur.setCellValueFactory(new PropertyValueFactory<>("id_conducteur"));    tabnom_conducteur.setCellValueFactory(new PropertyValueFactory<>("nom_conducteur"));    tabcin_conducteur.setCellValueFactory(new PropertyValueFactory<>("cin_conducteur"));    tabprenom_conducteur.setCellValueFactory(new PropertyValueFactory<>("prenom_conducteur"));    tabtelephone_conducteur.setCellValueFactory(new PropertyValueFactory<>("telephone_conducteur"));    tabville_conducteur.setCellValueFactory(new PropertyValueFactory<>("ville_conducteur"));    tabtype_de_permis.setCellValueFactory(new PropertyValueFactory<>("type_de_permis"));    tabimage_conducteur.setCellValueFactory(new PropertyValueFactory<>("image_conducteur"));    tabconducteur.setItems(observableList);    }public List<Conducteur> ConducteurList() {        List<Conducteur> Conducteur = new ArrayList<>();        String sql = "SELECT * FROM conducteur";        try (Connection conn = DriverManager.getConnection(url, user, password);                Statement stmt = conn.createStatement();                ResultSet rs = stmt.executeQuery(sql)) {            while (rs.next()) {                Conducteur cd = new Conducteur();                cd.setId_conducteur(rs.getInt("id_conducteur"));                cd.setNom_conducteur(rs.getString("nom_conducteur"));                cd.setCin_conducteur(rs.getInt("cin_conducteur"));                cd.setPrenom_conducteur(rs.getString("prenom_conducteur"));                cd.setTelephone_conducteur(rs.getInt("telephone_conducteur"));                cd.setEmail_conducteur(rs.getString("email_conducteur"));                cd.setVille_conducteur(rs.getString("ville_conducteur"));                cd.setMdp_conducteur(rs.getString("mdp_conducteur"));                cd.setType_de_permis(rs.getString("type_de_permis"));                cd.setImage_conducteur(rs.getString("image_conducteur"));                Conducteur.add(cd);                System.out.println(cd);            }        } catch (SQLException e) {            System.out.println(e.getMessage());        }        return Conducteur;    }    @FXML    private void offre(ActionEvent event) {        try {            Parent avisParent = FXMLLoader.load(getClass().getResource("OffreAffAdmn.fxml"));            Scene avisScene = new Scene(avisParent);            Stage window = (Stage) (((Button) event.getSource()).getScene().getWindow());            window.setScene(avisScene);            window.show();        } catch (IOException e) {        }    }    @FXML    private void afficherimageconducteur(MouseEvent event) {    }   private void afficherImageConducteur(String imagePath, ImageView imageView) {    if (imagePath == null || imagePath.isEmpty()) {        imageView.setImage(null);    } else {        File file = new File(imagePath);        if (file.exists()) {            Image image = new Image(file.toURI().toString());            imageView.setImage(image);        } else {            imageView.setImage(null);            System.out.println("Le fichier d'image n'existe pas : " + imagePath);        }    }   }    }